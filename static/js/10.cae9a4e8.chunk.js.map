{"version":3,"sources":["src/components/AmountMeta.tsx","src/screens/SHTUnstakeScreen.tsx"],"names":["AmountMeta","props","t","useTranslation","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","Staking","state","useSTStakingState","marginTop","large","STokenBalance","AmountInput","stoken","yourSTokenStaked","isZero","text","small","UnstakeInfo","tiny","formatBalance","decimals","token","onAmountChanged","setAmount","autoFocus","isEmptyValue","unStakeAmount","undefined","parseBalance","Controls","useState","error","setError","UnstakeButton","onError","gt","symbol","loading","message","code","title","leaving","onPress","a","async","onLeave","SHTUnstakeScreen","light","Platform","OS"],"mappings":"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","file":"static/js/10.cae9a4e8.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SHTUnstakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"unstake\")} />\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourSTokenStaked?.isZero()  && (\n                <Notice text={t(\"you-dont-have-staked-stoken\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-staked-BTCTS\")} />\n            <AmountMeta\n                style={{marginBottom: Spacing.tiny}}\n                amount={state.yourSTokenStaked ? \n                    formatBalance(state.yourSTokenStaked, state.stoken!.decimals) : \"\"}\n                suffix={\"BTCST\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourSTokenStaked.isZero()) {\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-unstake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.stoken || !state.yourSTokenStaked\n         || state.yourSTokenStaked.isZero() \n         || isEmptyValue(state.amount);\n    const unStakeAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.stoken!.decimals);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={unStakeAmount ? formatBalance(unStakeAmount, state.stoken!.decimals, 8) : \"\"}\n                suffix={\"BTCST\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourSTokenStaked.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourSTokenStaked) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTUnstakeScreen;\n"],"sourceRoot":""}