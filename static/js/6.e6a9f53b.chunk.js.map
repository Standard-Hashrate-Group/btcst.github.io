{"version":3,"sources":["src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/utils/api-utils.ts","node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/hooks/useHomeState.tsx","src/screens/SHTHomeScreen.tsx"],"names":["Border","props","border","useColors","style","height","width","backgroundColor","marginTop","small","Spacing","tiny","marginBottom","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","alignItems","Text","note","Constants","manifest","version","Heading","accent","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","totalSupplyOfSToken","totalSupply","getTotalRemainingSupplyLocked","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","console","log","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","fetchBtcMiningStat","fetch","response","json","code","msg","dayList","data","hourList","getBTCSTPrice","market_pairs","find","pair","market_pair","exchange","quote","USD","price","viewRoundSlot","timeKey","_roundSlotsReward","token","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","started","stakePeriod","desc","module","exports","obj","TypeError","WBTC","Token","ChainId","MAINNET","DAI","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","WETH","CUSTOM_BASES","address","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","tokenA","tokenB","basePairs","flatMap","base","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","equals","Fetcher","fetchPairData","pairs","useSDK","getTotalSupply","EthersContext","getTrade","fromToken","toToken","fromAmount","eth","isETH","from","convertToken","to","Currency","CurrencyAmount","ether","TokenAmount","Trade","bestTradeExactIn","maxHops","maxNumResults","getPair","calculateAmountOfLPTokenMinted","toAmount","liquidityToken","minted","getLiquidityMinted","ethers","BigNumber","raw","useHomeState","useState","loadingTotalMined","setLoadingTotalMined","totalMinedBTC","setTotalMinedBTC","totalStakedBTCST","setTotalStakedBTCST","setLoadingTotalStaked","yourBTCInpool","setYourBTCInpool","setloadingBTCInpool","totalMiningPower","setTotalMiningPower","setLoadingTotalMiningPower","useEffect","useAsyncEffect","fetched","getAddress","Home","state","TotalStaked","t","useTranslation","goToSwap","loadingTokens","staked","loading","loadingTotalStaked","Title","formatBalance","TotalMiningPower","power","number","suffix","YourBalance","goToFarming","loadingBTCInpool","LoadingNumber","Loading","SHTHomeScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/6.e6a9f53b.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\nexport const getTotalRemainingSupplyLocked = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getTotalRemainingSupplyLocked();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"V2FarmWithApiWithUpgrade\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"V2FarmWithApiWithUpgrade\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};\n\n\nexport const fetchBtcMiningStat = async ()=>{\n    // const response = await fetch(\"https://pool.binance.cc/mining-api/v1/public/pool/price/priceKline?algoId=1\");\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay\");\n    \n    const json = await response.json();\n    if (json.code != 0){\n        return {code:json.code,msg:json.msg};\n    }\n    const dayList = json.data.dayList;\n    const hourList = json.data.hourList;\n    return {code:0,dayList:dayList,hourList:hourList};\n}\n\nexport async function getBTCSTPrice() {\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/gp-replay\");\n\n    const data = await response.json();\n\n    const source = (data?.data?.market_pairs || []).find(pair => {\n        return pair && pair.market_pair === \"BTCST/USDT\" && pair.exchange?.name === \"Binance\";\n    });\n\n    return source?.quote?.USD?.price || 0;\n}\n\nexport const viewRoundSlot = async(timeKey: number,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract.viewRoundSlot(timeKey);\n    return value;\n};\n\nexport const _roundSlotsReward = async(timeKey: number,token: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    const value = await contract._roundSlotsReward(timeKey,token);\n    return value;\n};\n\nexport const viewFarmBasicInfo = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"V2FarmWithApiWithUpgrade\",BTCSTFarm,provider);\n    console.log(contract);\n    const data = await Promise.all(\n        [\"_farmStartedTime\", \"_miniStakePeriodInSeconds\", \"_farmDescription\"].map(field => {\n            try {\n                return contract.callStatic[field]();\n            } catch (e) {\n                console.log(e);\n                return \"\";\n            }\n        })\n    );\n    return {\n        started: data[0],\n        stakePeriod: data[1],\n        desc: data[2]\n    };\n};\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst WBTC = new Token(ChainId.MAINNET, \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\", 8, \"WBTC\", \"Wrapped BTC\");\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiToken\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], WBTC, DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET], WBTC]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { Currency, CurrencyAmount, Fetcher, Pair, TokenAmount, Trade } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { convertToken, isETH } from \"../utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { getTotalSupply } = useContext(EthersContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const eth = isETH(fromToken);\n                const from = convertToken(fromToken);\n                const to = isETH(toToken) ? Currency.ETHER : convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = eth\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const calculateAmountOfLPTokenMinted = async (pair: Pair, fromAmount: TokenAmount, toAmount: TokenAmount) => {\n        const totalSupply = await getTotalSupply(pair.liquidityToken.address);\n        if (totalSupply) {\n            const minted = pair.getLiquidityMinted(\n                new TokenAmount(pair.liquidityToken, totalSupply.toString()),\n                fromAmount,\n                toAmount\n            );\n            return ethers.BigNumber.from(minted.raw.toString());\n        }\n    };\n\n    return {\n        getTrade,\n        getPair,\n        calculateAmountOfLPTokenMinted\n    };\n};\n\nexport default useSDK;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport { totalSupplyOfSToken,fetchTotalMinedRTokenInpool,\n     fetchCurrentTotalStakedSTokenInpool,viewGetTotalRewardBalanceInPool} from \"../utils/api-utils\";\n\nexport interface HomeState {\n    totalMinedBTC:ethers.BigNumber;\n    totalStakedBTCST:ethers.BigNumber;\n    yourBTCInpool:ethers.BigNumber;\n    totalMiningPower:ethers.BigNumber;\n    \n    loadingTotalMined:boolean;\n    loadingTotalStaked:boolean;\n    loadingBTCInpool:boolean;\n    loadingTotalMiningPower:boolean;\n\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHomeState = () => {\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    \n    const { getPair } = useSDK();\n\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    const [yourBTCInpool,setYourBTCInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n    const [totalMiningPower,setTotalMiningPower] = useState<ethers.BigNumber>();\n    const [loadingTotalMiningPower,setLoadingTotalMiningPower] = useState(true);\n    \n\n    useEffect(() => {\n        setTotalMinedBTC(undefined);\n        setTotalStakedBTCST(undefined);\n        setYourBTCInpool(undefined);\n        setTotalMiningPower(undefined);\n\n        setLoadingTotalMined(true);\n        setLoadingTotalStaked(true);\n        setloadingBTCInpool(true);\n        setLoadingTotalMiningPower(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            const fetched = await viewGetTotalRewardBalanceInPool(await signer.getAddress(),provider);\n            try{\n                setYourBTCInpool(await fetched);\n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalMiningPower(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            try{\n                setTotalMiningPower(await fetched);\n            }finally{\n                setLoadingTotalMiningPower(false);\n            }\n        }\n    },[provider,signer]);\n\n\n    // Load Liquidity\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0) {\n    //         setLoadingLPTokens(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyLPTokens(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setLPTokens(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingLPTokens(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens]);\n\n    // Load Farming\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0 && lpTokens) {\n    //         setLoadingPools(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyPools(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setPools(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingPools(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens, lpTokens]);\n\n    return {\n        totalMinedBTC,\n        totalStakedBTCST,\n        yourBTCInpool,\n        totalMiningPower,\n        loadingTotalMined\n    };\n};\n\nexport default useHomeState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenName from \"../components/TokenName\";\nimport TokenPrice from \"../components/TokenPrice\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport TokenValue from \"../components/TokenValue\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useHomeState, { HomeState } from \"../hooks/useHomeState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\ninterface TokenItemProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n}\n\ninterface LPTokenItemProps {\n    token: LPTokenWithValue;\n    disabled?: boolean;\n}\n\nconst SHTHomeScreen = () => {\n    const t = useTranslation();\n    const state = useHomeState();\n    const { } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1,fontSize:28 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Home state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst Home = ({ state }: { state: HomeState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <TotalStaked state={state} />\n            <View style={{ height: Spacing.large }} />\n            <TotalMiningPower state={state} />\n            <Border />\n            <View style={{ height: Spacing.large }} />\n            <YourBalance state={state} />\n        </View>\n    );\n};\n\nconst TotalStaked = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const goToSwap = useLinker(\"/staking\", \"Stake\");\n    const staked = state.totalStakedBTCST;\n    const loading = state.loadingTotalStaked;\n    return (\n        <View>\n            <Heading text={t(\"total-staked-btcst\")} buttonText={t(\"stake\")} onPressButton={goToSwap} />\n            <Title\n                        text={loading ||staked==undefined ? t(\"fetching\") : formatBalance(staked,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\n\nconst TotalMiningPower = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const loading = state.loadingTotalStaked;\n    const power = state.totalStakedBTCST!=undefined?\n        state.totalStakedBTCST.div(ethers.BigNumber.from(10)):undefined;\n    return (\n        <View>\n            <Heading text={t(\"total-mining-power\")} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={loading} \n                number={power} suffix={\" TH/s\"}/>\n        </View>\n    );\n};\n\nconst YourBalance = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/claim\", \"Mining\");\n    return (\n        <View>\n            <Heading text={t(\"your-btc-balance-inpool\")} buttonText={t(\"claim\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingBTCInpool} number={state.yourBTCInpool} />\n        </View>\n    );\n};\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number,18,8)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\n\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://www.1-b.tc/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\n\nconst sum = tokens => (tokens ? tokens.reduce((previous, current) => previous + (current.valueUSD || 0), 0) : 0);\n\nexport default SHTHomeScreen;\n"],"sourceRoot":""}