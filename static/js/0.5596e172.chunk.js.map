{"version":3,"sources":["src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/utils/api-utils.ts","src/components/InfoBox.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Notice.tsx","src/hooks/useSTStakingState.tsx"],"names":["Border","props","border","useColors","style","height","width","backgroundColor","marginTop","small","Spacing","tiny","marginBottom","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","alignItems","Text","note","Constants","manifest","version","Heading","accent","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","totalSupplyOfSToken","totalSupply","getTotalRemainingSupplyLocked","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","console","log","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","fetchBtcMiningStat","fetch","response","json","code","msg","dayList","data","hourList","getBTCSTPrice","market_pairs","find","pair","market_pair","exchange","quote","USD","price","viewRoundSlot","timeKey","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","started","stakePeriod","desc","InfoBox","backgroundLight","borderDark","useStyles","Input","textDark","textMedium","onChangeText","onError","errors","forbidden","forEach","validation","match","regexp","error","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Button","maxButtonText","symbol","TokenInput","onAmountChanged","parseBalance","endsWith","indexOf","label","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","ErrorMessage","message","FetchingButton","t","useTranslation","InsufficientBalanceButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","useSTStakingState","EthersContext","address","getTokenAllowance","useState","setAmount","stoken","setSToken","loading","setloading","stokenAllowed","setSTokenAllowed","yourTotalSToken","setYourTotalSToken","yourFreeToSendSToken","setYourFreeToSendSToken","yourSTokenStaked","setYourSTokenStaked","totalSTokenSupply","setTotalSTokenSupply","entering","setEntering","leaving","setLeaving","txHappend","setTxHappend","sToken","logoURI","BigNumber","from","useEffect","useAsyncEffect","minAllowance","pow","stokenAllowance","gte","getAddress","freeToMove","userInfoInFarm","amnt","lockedAmnt","lockedAmount","add","stokenContract","onEnter","parsed","wait","onLeave"],"mappings":"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","file":"static/js/0.5596e172.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\nexport const getTotalRemainingSupplyLocked = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getTotalRemainingSupplyLocked();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};\n\n\nexport const fetchBtcMiningStat = async ()=>{\n    // const response = await fetch(\"https://pool.binance.cc/mining-api/v1/public/pool/price/priceKline?algoId=1\");\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay\");\n    \n    const json = await response.json();\n    if (json.code != 0){\n        return {code:json.code,msg:json.msg};\n    }\n    const dayList = json.data.dayList;\n    const hourList = json.data.hourList;\n    return {code:0,dayList:dayList,hourList:hourList};\n}\n\nexport async function getBTCSTPrice() {\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/gp-replay\");\n\n    const data = await response.json();\n\n    const source = (data?.data?.market_pairs || []).find(pair => {\n        return pair && pair.market_pair === \"BTCST/USDT\" && pair.exchange?.name === \"Binance\";\n    });\n\n    return source?.quote?.USD?.price || 0;\n}\n\nexport const viewRoundSlot = async(timeKey: number,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewRoundSlot(timeKey);\n    return value;\n};\n\nexport const viewFarmBasicInfo = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    console.log(contract);\n    const data = await Promise.all(\n        [\"_farmStartedTime\", \"_miniStakePeriodInSeconds\", \"_farmDescription\"].map(field => {\n            try {\n                return contract.callStatic[field]();\n            } catch (e) {\n                console.log(e);\n                return \"\";\n            }\n        })\n    );\n    return {\n        started: data[0],\n        stakePeriod: data[1],\n        desc: data[2]\n    };\n};\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"decimal-pad\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,getFreeToTransferAmount,totalSupplyOfSToken,stakeActions, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface StakingState {\n    loading:boolean;\n    stoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalSToken:ethers.BigNumber;\n    yourFreeToSendSToken:ethers.BigNumber;\n    yourSTokenStaked:ethers.BigNumber;\n\n    stokenAllowed: boolean;\n    setSTokenAllowed: (allowed: boolean) => void;\n    \n    totalSTokenSupply:ethers.BigNumber;\n\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTStakingState = () => {\n    const { provider,signer, address, getTokenAllowance} = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [stoken,setSToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [stokenAllowed, setSTokenAllowed] = useState(false);\n\n    const [yourTotalSToken,setYourTotalSToken] = useState<ethers.BigNumber>();\n    const [yourFreeToSendSToken,setYourFreeToSendSToken] = useState<ethers.BigNumber>();\n    const [yourSTokenStaked,setYourSTokenStaked] = useState<ethers.BigNumber>();\n    const [totalSTokenSupply,setTotalSTokenSupply] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n\n    useEffect(() => {\n        setAmount(\"\");\n        setSToken(sToken);\n        setloading(true);\n        setYourFreeToSendSToken(ethers.BigNumber.from(0));\n        setYourSTokenStaked(ethers.BigNumber.from(0));\n        setYourTotalSToken(ethers.BigNumber.from(0));\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && stoken) {\n            setSTokenAllowed(false);\n            setloading(true);\n            try{\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const stokenAllowance = await getTokenAllowance(stoken.address, BTCSTFarm);\n                setSTokenAllowed(ethers.BigNumber.from(stokenAllowance).gte(minAllowance));\n                const freeToMove = await getFreeToTransferAmount(await signer.getAddress(),provider);\n                const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n                setYourFreeToSendSToken(await freeToMove);\n                const amnt = (await userInfoInFarm).amount;\n                const lockedAmnt = (await userInfoInFarm).lockedAmount;\n                setYourSTokenStaked(ethers.BigNumber.from(amnt).add(ethers.BigNumber.from(lockedAmnt)));\n                const stokenContract = getContract(\"ERC20\", BTCST, signer);\n                setYourTotalSToken(await stokenContract.balanceOf(signer.getAddress()));\n                setTotalSTokenSupply(await totalSupplyOfSToken(provider));\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,stoken,txHappend]);\n    const onEnter = useCallback(async () => {\n        if (amount && stoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                console.log(\"before entering\");\n                const tx = await enter(parsed, signer);\n                console.log(\"before wait\");\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                    console.log(\"after wait\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer &&stoken) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n    return {\n        loading,\n        amount,\n        setAmount,\n        stoken,\n        yourTotalSToken,\n        yourFreeToSendSToken,\n        yourSTokenStaked,\n        stokenAllowed,\n        setSTokenAllowed,\n        totalSTokenSupply,\n        onEnter,\n        entering,\n        onLeave,\n        leaving,\n        txHappend\n    };\n};\n\nexport default useSTStakingState;\n"],"sourceRoot":""}