{"version":3,"sources":["src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/utils/api-utils.ts","src/components/InfoBox.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/components/Meta.tsx","src/components/Expandable.tsx","src/hooks/useHistoryState.tsx","src/screens/SHTHistoryScreen.tsx"],"names":["Border","props","border","useColors","style","height","width","backgroundColor","marginTop","small","Spacing","tiny","marginBottom","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","alignItems","Text","note","Constants","manifest","version","Heading","accent","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","totalSupplyOfSToken","totalSupply","getTotalRemainingSupplyLocked","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","console","log","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","fetchBtcMiningStat","fetch","response","json","code","msg","dayList","data","hourList","getBTCSTPrice","market_pairs","find","pair","market_pair","exchange","quote","USD","price","viewRoundSlot","timeKey","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","started","stakePeriod","desc","InfoBox","backgroundLight","borderDark","useStyles","Input","textDark","textMedium","onChangeText","onError","errors","forbidden","forEach","validation","match","regexp","error","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Button","maxButtonText","symbol","TokenInput","onAmountChanged","parseBalance","endsWith","indexOf","label","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","Meta","url","suffix","textDecorationLine","Expandable","t","useTranslation","useState","expanded","setExpanded","shouldExpand","onExpand","display","children","useHistoryState","EthersContext","address","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","totalStokenSupply","setTotalStokenSupply","loadingTotalStokenSupply","setLoadingTotalStokenSupply","totalStokenLocked","settotalStokenLocked","loadingTotalStokenLocked","setLoadingTotalStokenLocked","totalStakedBTCST","setTotalStakedBTCST","loadingTotalStaked","setLoadingTotalStaked","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","loadingMiningStatList","setLoadingMiningStatList","dayMiningList","setDayMiningList","setAmount","stoken","setSToken","records","setRecords","selectedRecord","setSelectedRecord","loadingDailyRecord","setLoadingDailyRecord","farmInfo","setFarmInfo","recordLastLoadTime","setRecordLastLoadTime","alreadyLoadedTime","setAlreadyLoadedTime","getPriceLoading","setGetPriceLoading","btcstPrice","setBtcstPrice","sToken","logoURI","BigNumber","from","getTimeKey","time","baseTime","Error","passed","Math","round","end","useEffect","useAsyncEffect","fetched","toNumber","Date","now","arr","index","go","k","rewardLastSubmiter","rewardAmount","rewardAccumulateAmount","totalStaked","stakedLowestWaterMark","totalStakedInSlot","stakedAddresses","concat","locked","rtokenContract","BBTC","StatInfo","dailyEstimatedUSD","dailyBTCNetreward","dailyBTCNetrewardPerStaked","dailyUSDRewardPerStaked","boostTimes","state","totalValue","loading","totalStoken","totalStokenRemainLocked","loadingDaily","FixedNumber","fromString","mulUnsafe","eachHaveCoin","preHash","hashrate","rate","divUnsafe","subUnsafe","toUnsafeFloat","dailyBtcPerHash","calculateDailyReward","btc","usd","Title","textAlign","formatApy","String","EstimateAmountInput","isZero","aboveLine","compare","addUnsafe","RewardRecords","recordItem","RecordItem","RecordList","renderItem","item","key","record","useMemo","sort","t1","t2","Loading","paddingVertical","caption","numberOfLines","marginLeft","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","formatTimeKey2","SHTHistoryScreen","Screen","Container","BackgroundImage","Content"],"mappings":"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","file":"static/js/5.219d53eb.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\nexport const getTotalRemainingSupplyLocked = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getTotalRemainingSupplyLocked();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};\n\n\nexport const fetchBtcMiningStat = async ()=>{\n    // const response = await fetch(\"https://pool.binance.cc/mining-api/v1/public/pool/price/priceKline?algoId=1\");\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay\");\n    \n    const json = await response.json();\n    if (json.code != 0){\n        return {code:json.code,msg:json.msg};\n    }\n    const dayList = json.data.dayList;\n    const hourList = json.data.hourList;\n    return {code:0,dayList:dayList,hourList:hourList};\n}\n\nexport async function getBTCSTPrice() {\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/gp-replay\");\n\n    const data = await response.json();\n\n    const source = (data?.data?.market_pairs || []).find(pair => {\n        return pair && pair.market_pair === \"BTCST/USDT\" && pair.exchange?.name === \"Binance\";\n    });\n\n    return source?.quote?.USD?.price || 0;\n}\n\nexport const viewRoundSlot = async(timeKey: number,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewRoundSlot(timeKey);\n    return value;\n};\n\nexport const viewFarmBasicInfo = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    console.log(contract);\n    const data = await Promise.all(\n        [\"_farmStartedTime\", \"_miniStakePeriodInSeconds\", \"_farmDescription\"].map(field => {\n            try {\n                return contract.callStatic[field]();\n            } catch (e) {\n                console.log(e);\n                return \"\";\n            }\n        })\n    );\n    return {\n        started: data[0],\n        stakePeriod: data[1],\n        desc: data[2]\n    };\n};\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"decimal-pad\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Heading from \"./Heading\";\n\nexport interface ExpandableProps {\n    title: string;\n    expanded: boolean;\n    onExpand?: () => void;\n    style?: ViewStyle;\n    children?: ReactNode;\n}\n\nconst Expandable: FC<ExpandableProps> = props => {\n    const t = useTranslation();\n    const [expanded, setExpanded] = useState(true);\n    const shouldExpand = props.expanded && expanded;\n    const buttonText = shouldExpand ? undefined : t(\"change\");\n    const onPress = () => {\n        setExpanded(true);\n        props.onExpand?.();\n    };\n\n    return (\n        <View style={props.style}>\n            <Heading text={props.title} buttonText={buttonText} onPressButton={onPress} />\n            <View style={{ display: shouldExpand ? \"flex\" : \"none\" }}>{props.children}</View>\n        </View>\n    );\n};\n\nexport default Expandable;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { BigNumber, ethers, FixedNumber } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { getBTCSTPrice, viewFarmBasicInfo,viewRoundSlot,fetchBtcMiningStat,getTotalRemainingSupplyLocked,viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport Token from \"../types/Token\";\nexport const BATCH_LOAD_RECORD_LIMIT = 5;\n\nexport interface MiningStat{\n    time:number,\n    price:FixedNumber,\n    eachHaveCoin:FixedNumber,\n    eachHaveUsdt:FixedNumber,\n    eachHaveCny:FixedNumber\n}\n\nexport interface FarmInfo{\n    started: number;\n    stakePeriod: number;\n    desc: string|undefined;\n}\n\nexport interface DailyRecord{\n    rewardLastSubmiter:string;\n    rewardAmount:BigNumber;\n    rewardAccumulateAmount:BigNumber;\n    totalStaked:BigNumber;\n    stakedLowestWaterMark:BigNumber;\n    totalStakedInSlot:BigNumber;\n    stakedAddresses:string[];\n    timeKey:number;\n}\n\nexport interface HistoryState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    \n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n\n    totalStokenSupply:ethers.BigNumber;\n    loadingTotalStokenSupply:boolean;\n\n    totalStokenLocked:ethers.BigNumber;\n    loadingTotalStokenLocked:boolean;\n\n    totalStakedBTCST:ethers.BigNumber;\n    loadingTotalStaked:boolean;\n\n    estimatedBTCPerToken:ethers.BigNumber;\n    loadingEstimatedBTC:boolean;\n\n\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean;\n\n    dayMiningList:MiningStat[];\n    hourMiningList:MiningStat[]\n    loadingMiningStatList:boolean;\n\n    amount: string;\n    setAmount: (amount: string) => void;\n\n    stoken?: Token;\n\n    loadingDailyRecord:boolean;\n    selectedRecord?:DailyRecord;\n    setSelectedRecord:(record?:DailyRecord)=>void;\n    records?:DailyRecord[];\n\n    farmInfo?:FarmInfo;\n    recordLastLoadTime:number|undefined;\n\n    alreadyLoadedTime:number|undefined;\n\n    getPriceLoading: boolean;\n    btcstPrice: number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHistoryState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n\n    const [totalStokenSupply,setTotalStokenSupply] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenSupply,setLoadingTotalStokenSupply] = useState(true);\n\n    const [totalStokenLocked,settotalStokenLocked] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenLocked,setLoadingTotalStokenLocked] = useState(true);\n\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    const [loadingMiningStatList,setLoadingMiningStatList] = useState(true);\n    \n    const [dayMiningList,setDayMiningList] = useState<MiningStat[]>();\n    const [amount, setAmount] = useState(\"\");\n    const [stoken,setSToken] = useState<Token>();\n    const [records,setRecords] = useState<DailyRecord[]>();\n    const [selectedRecord,setSelectedRecord] =useState<DailyRecord>();\n    const [loadingDailyRecord,setLoadingDailyRecord] = useState(true);\n    const [farmInfo,setFarmInfo] = useState<FarmInfo>();\n    const [recordLastLoadTime,setRecordLastLoadTime] = useState<number>();\n    const [alreadyLoadedTime,setAlreadyLoadedTime] = useState<number>();\n    const [getPriceLoading, setGetPriceLoading] = useState<boolean>(false);\n    const [btcstPrice, setBtcstPrice] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n    function getTimeKey(time,baseTime,stakePeriod){\n        if (time<baseTime){\n            throw new Error(\"time < farm started time\");\n        }\n        let passed = Math.round(time-baseTime);\n        let round = Math.round(passed/stakePeriod);\n        let end = baseTime+round*stakePeriod;\n        if (end<time){\n            return end+stakePeriod;\n        }\n        return end;\n    }\n    useEffect(() => {\n        setSToken(sToken);\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingTotalStokenSupply(true);\n        setLoadingTotalStokenLocked(true);\n        setLoadingTotalStaked(true);\n        setLoadingMiningStatList(true);\n        setAmount(\"\");\n        setLoadingDailyRecord(true);\n        setFarmInfo(undefined);\n        setRecordLastLoadTime(undefined);\n    }, [address]);\n\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            try{\n                const fetched = await viewFarmBasicInfo(provider);\n                setFarmInfo({started:fetched.started.toNumber(),stakePeriod:fetched.stakePeriod.toNumber(),desc:fetched.desc});\n                setRecordLastLoadTime(getTimeKey(Date.now()/1000,fetched.started,fetched.stakePeriod));\n            }finally{\n\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && farmInfo &&recordLastLoadTime) {\n            setLoadingDailyRecord(true);\n            console.log(\"farminfo\",farmInfo);\n            try{\n                let arr = [];\n                let now = Date.now()/1000;\n                if (alreadyLoadedTime && alreadyLoadedTime<now && alreadyLoadedTime>farmInfo.started){\n                    now = alreadyLoadedTime - farmInfo.stakePeriod;\n                }\n                for (let index = 0; index < BATCH_LOAD_RECORD_LIMIT; index++) {\n                    let go = now-index*farmInfo.stakePeriod;\n                    if (go<=farmInfo.started){\n                        break;;\n                    }\n                    let k = getTimeKey(go,farmInfo.started,farmInfo.stakePeriod);\n                    arr.push(k);\n                }\n                let data = await Promise.all(\n                    arr.map(field => {\n                        try {\n                            return viewRoundSlot(field,provider);\n                        } catch (e) {\n                            return \"\";\n                        }\n                    })\n                );\n                for (let index = 0; index < arr.length; index++) {\n                    data[index] = Object.assign({},data[index],{timeKey:arr[index]});\n                    data[index] = {\n                        rewardLastSubmiter:data[index]['rewardLastSubmiter'],\n                        rewardAmount:data[index]['rewardAmount'],\n                        rewardAccumulateAmount:data[index]['rewardAccumulateAmount'],\n                        totalStaked:data[index]['totalStaked'],\n                        stakedLowestWaterMark:data[index]['stakedLowestWaterMark'],\n                        totalStakedInSlot:data[index]['totalStakedInSlot'],\n                        stakedAddresses:data[index]['stakedAddresses'],\n                        timeKey:arr[index]\n                    } as DailyRecord;\n                }\n                if (records && records.length>0){\n                    data = records.concat(data);\n                }\n                if (arr.length>0){\n                    setAlreadyLoadedTime(arr[arr.length-1]);\n                }\n                setRecords(data);\n            }catch(e){\n                console.log(e);    \n            }finally{\n                setLoadingDailyRecord(false);\n            }\n        }\n\n    },[provider,signer,farmInfo,recordLastLoadTime]);\n\n    useAsyncEffect(async () => {\n        setGetPriceLoading(true);\n        try{\n            const btcstPrice = await getBTCSTPrice();\n            setBtcstPrice(btcstPrice);\n        } finally {\n            setGetPriceLoading(false);\n        }\n    }, [])\n\n\n    useAsyncEffect(async()=>{\n        setLoadingMiningStatList(true);\n        if (provider && signer) {\n            try{\n                // let tmp = JSON.parse('[{\"time\": 1609027200000,\"price\": \"26493.40\",\"eachHaveCoin\": \"0.00000740\",\"eachHaveUsdt\": \"0.19243450\",\"eachHaveCny\": \"1.25886801\"}]');\n                // setDayMiningList(tmp);\n                const fetched = await fetchBtcMiningStat();\n                if (fetched.code ==0 && fetched.dayList){\n                    setDayMiningList(fetched.dayList);\n                }\n            }finally{\n                setLoadingMiningStatList(false);\n            }\n        }\n    },[provider,signer]);\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load total supply of stoken\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n   //load daily records\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);    \n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        totalStokenSupply,\n        loadingTotalStokenSupply,\n        totalStokenLocked,\n        loadingTotalStokenLocked,\n        totalStakedBTCST,\n        loadingTotalStaked,\n        dayMiningList,\n        loadingMiningStatList,\n        yourMiningPower,\n        loadingYourMiningPower,\n        stoken,\n        amount,\n        setAmount,\n        loadingDailyRecord,\n        selectedRecord,\n        setSelectedRecord,\n        records,\n        btcstPrice,\n        getPriceLoading,\n    };\n};\n\nexport default useHistoryState;\n","import React, { FC, useCallback, useContext, useEffect, useMemo } from \"react\";\nimport { FlatList, Platform, View } from \"react-native\";\n\nimport moment from \"moment\";\nimport useAsyncEffect from \"use-async-effect\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport FlexView from \"../components/FlexView\";\nimport InfoBox from \"../components/InfoBox\";\nimport Heading from \"../components/Heading\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Loading from \"../components/Loading\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useMyLimitOrdersState, { MyLimitOrdersState } from \"../hooks/useMyLimitOrdersState\";\nimport { Order } from \"../hooks/useSettlement\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Screen from \"./Screen\";\nimport useHistoryState, { DailyRecord, HistoryState } from \"../hooks/useHistoryState\";\nimport { BigNumber, FixedNumber } from \"ethers\";\nimport TokenInput from \"../components/TokenInput\";\nimport Border from \"../components/Border\";\nimport { formatUSD, formatBalance, formatTimeKey2, formatPercentage, calculateDailyReward, formatApy } from \"../utils\";\ninterface DailyRecordProp{\n    record:DailyRecord;\n\n}\nconst DISTRIBUTE_LINE = \"0.6\";\n\nconst SHTHistoryScreen = () => {\n    const t = useTranslation();\n    const state = useHistoryState();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"farm-stats\")} />\n                    <Text light={true}>{t(\"pool-history-desc\")}</Text>\n                    <StatInfo state={state}/>                    \n                    <EstimateAmountInput state={state}/>\n                    {/* <Border style={{marginBottom:0}}/> */}\n                    <RewardRecords />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst StatInfo = ({state}:{state:HistoryState})=>{\n    const t = useTranslation();\n    const disabled = false;\n    const expiry = false;\n    \n    const totalValue = state.totalMinedBTC;\n    const loading = state.loadingTotalMined;\n    const totalStoken = state.totalStokenSupply;\n    const totalStokenRemainLocked = state.totalStokenLocked;\n    const totalStaked = state.totalStakedBTCST;\n    const btcInpool = state.btcInpool;\n    const loadingDaily = state.loadingMiningStatList ||state.loadingTotalStaked || state.getPriceLoading;\n\n    // console.log(\"setLoadingMiningStatList\"+loadingDaily);\n    // console.log(formatBalance(totalStaked.div(BigNumber.from(10)),18,8));\n\n    const dailyEstimated = loadingDaily||totalStaked==undefined?undefined:\n            FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\")\n                .mulUnsafe(FixedNumber.from(state.dayMiningList[0].eachHaveCoin));\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward;  \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (dailyEstimated!=undefined && totalStoken!=undefined && totalStaked!=undefined){\n        let aboveLine = true;\n        let preHash = FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\");\n        let hashrate = preHash;\n        let compare = FixedNumber.from(totalStaked);\n        let rate = compare.divUnsafe(FixedNumber.from(totalStoken))\n                .subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");        \n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            boostTimes = hashrate.divUnsafe(preHash);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        console.log(\"calculate netreward using pric:\"+price+\" daily btc per TH:\"+dailyBtcPerHash+\" hashrate:\"+hashrate);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        dailyBTCNetreward= btc;\n        dailyEstimatedUSD= usd;\n\n        dailyBTCNetrewardPerStaked = dailyBTCNetreward.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n        dailyUSDRewardPerStaked = dailyEstimatedUSD.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n    }\n    return (\n        <InfoBox>\n            <Title text={t(\"total-mined\")} style={{ flex: 1, fontSize: 28, textAlign: \"center\" }} />\n            <Title\n                text={loading || totalValue == undefined ? t(\"fetching\") : formatBalance(totalValue, 18, 8)}\n                fontWeight={\"light\"}\n                disabled={loading}\n                style={{ fontSize: IS_DESKTOP ? 32 : 24, textAlign: \"center\" }}\n            />\n            <Meta\n                label={t(\"total-btc-still-in-pool\")}\n                text={\n                    state.loadingBTCInpool || totalStoken == undefined ? t(\"fetching\") : formatBalance(btcInpool, 18, 8)\n                }\n                suffix={\"\"}\n                disabled={state.loadingBTCInpool}\n            />\n\n            <Meta\n                label={t(\"stoken-total-supply\")}\n                text={\n                    state.loadingTotalStokenSupply || totalStoken == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStoken, 18, 8)\n                }\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenSupply}\n            />\n            <Meta\n                label={t(\"stoken-total-locked\")}\n                text={\n                    state.loadingTotalStokenLocked || totalStoken == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStokenRemainLocked, 18, 8)\n                }\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenLocked}\n            />\n            <Meta\n                label={t(\"total-staked-btcst\")}\n                text={\n                    state.loadingTotalStaked || totalStaked == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStaked, 18, 2)\n                }\n                suffix={\n                    state.loadingTotalStaked || totalStaked == undefined\n                        ? \"\"\n                        : \"=\" + formatBalance(totalStaked.div(BigNumber.from(10)), 18, 2) + \" TH/s\"\n                }\n                disabled={state.loadingTotalStaked}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward\")}\n                text={\n                    loadingDaily || dailyBTCNetreward == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(dailyBTCNetreward, 18, 8) + \" BTC\"\n                }\n                suffix={\n                    loadingDaily || dailyEstimatedUSD == undefined\n                        ? t(\"fetching\")\n                        : \" ≈ \" + \"$ \" + formatBalance(dailyEstimatedUSD, 18, 2)\n                }\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-boost\")}\n                text={loadingDaily || boostTimes == undefined ? t(\"fetching\") : formatBalance(boostTimes, 18, 2) + \" X\"}\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-btc\")}\n                text={\n                    loadingDaily || dailyBTCNetrewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(dailyBTCNetrewardPerStaked, 18, 8) + \" BTC\"\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-usd\")}\n                text={\n                    loadingDaily || dailyUSDRewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : \"$ \" + formatBalance(dailyUSDRewardPerStaked, 18, 4)\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"apy\")}\n                text={\n                    loadingDaily || dailyUSDRewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : state.btcstPrice === 0\n                        ? \"-\"\n                        : formatApy(dailyUSDRewardPerStaked, FixedNumber.fromString(String(state.btcstPrice))) + '%'\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n        </InfoBox>\n    );\n};\n\nconst EstimateAmountInput = ({ state }: { state: HistoryState }) => {\n    const t = useTranslation();\n    const totalStoken = state.totalStokenSupply;\n    const totalStaked = state.totalStakedBTCST;\n    const disabled = (state.amount==undefined || state.amount==\"\" || FixedNumber.from(state.amount).isZero() \n    || state.loadingMiningStatList);\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward; \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (!disabled && totalStoken!=undefined && totalStaked!=undefined){\n        let hashrate = FixedNumber.fromString(state.amount).divUnsafe(FixedNumber.from(10));\n        let aboveLine = true;\n        let compare = FixedNumber.from(formatBalance(totalStaked,18,8)+\"\").addUnsafe(FixedNumber.from(state.amount));\n        let rate = compare.divUnsafe(FixedNumber.from( formatBalance(totalStoken,18,8)+\"\")\n                ).subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");\n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            console.log(\"compare:\"+compare+\" hashrate:\"+hashrate);\n            boostTimes = hashrate.mulUnsafe(FixedNumber.from(10)).divUnsafe(compare);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        \n        if (aboveLine){\n            dailyBTCNetreward= btc;\n            dailyEstimatedUSD= usd;\n        }else{\n            dailyBTCNetreward = btc.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n            dailyEstimatedUSD = usd.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n        }\n        \n    }\n    \n    return (\n        <View style={{marginTop:Spacing.large}}>\n            <Heading text={t(\"stake-amount-to-estimates\")} style={{marginBottom:0}} />\n            <Text light={true} style={{marginTop:0,marginBottom:Spacing.tiny}}>{t(\"estimate-desc\")}</Text>\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n            <InfoBox style={{marginTop:Spacing.tiny}}>\n                <Meta \n                    label={t(\"estimated-reward-in-btc\")} \n                    text={disabled?t(\"n/a\"):formatBalance(dailyBTCNetreward,18,8)}\n                    suffix={\"BTC\"}\n                    disabled={disabled} />\n                <Meta\n                    label={t(\"estimated-reward-in-usd\")}\n                    text={disabled?t(\"n/a\"):formatBalance(dailyEstimatedUSD,18,2)}\n                    suffix={\"USD\"}\n                    disabled={disabled}\n                />\n                <Meta\n                    label={t(\"estimated-boost-times\")}\n                    text={disabled?t(\"n/a\"):formatBalance(boostTimes,18,2)}\n                    suffix={\"X\"}\n                    disabled={disabled}\n                />\n            </InfoBox>\n        </View>\n    );\n};\n\nconst RewardRecords = () => {\n    const state = useHistoryState();\n    const t = useTranslation();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <Expandable\n                title={t(\"pool-daily-mined-history\")}\n                expanded={true}\n                onExpand={()=>{}}>\n                <RecordList loadingDailyRecord={state.loadingDailyRecord} \n                records={state.records}\n                recordItem={RecordItem}\n            />\n            </Expandable>\n            \n            {/* <OrderInfo state={state} /> */}\n        </View>\n    );\n};\n\nconst RecordList = (props: {\n    loadingDailyRecord: boolean;\n    records?: DailyRecord[];\n    recordItem: FC<DailyRecordProp>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>(props.records || [])\n                // @ts-ignore\n                .sort((t1, t2) => (t2.timeKey || 0) - (t1.timeKey || 0)),\n        [props.records]\n    );\n    return props.loadingDailyRecord || !props.records ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {t(\"deposited-rewards\")}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"staked-btcsts\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                {/* <ExternalIcon path={\"/all\"} /> */}\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"empty-staking-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: DailyRecordProp) => {\n    const record = props.record;\n    const rewardAmount = record.rewardAmount;\n    const stakedLowestWaterMark = record.stakedLowestWaterMark;\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={false}>\n                    {rewardAmount.gt(BigNumber.from(0)) ? formatBalance(rewardAmount || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={false}>\n                    {stakedLowestWaterMark.gt(BigNumber.from(0)) ? formatBalance(stakedLowestWaterMark || 0,18,2): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={false}>\n                    {formatTimeKey2(record.timeKey)}\n                </Text>\n            </View>\n            {/* <ExternalIcon path={\"/slot/\" + record.timeKey} /> */}\n        </FlexView>\n    );\n};\nexport default SHTHistoryScreen;\n"],"sourceRoot":""}