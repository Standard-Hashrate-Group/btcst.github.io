{"version":3,"sources":["src/components/Border.tsx","src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/utils/api-utils.ts","src/components/InfoBox.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/components/Meta.tsx","src/components/Expandable.tsx","src/hooks/useHistoryState.tsx","src/screens/SHTHistoryScreen.tsx"],"names":["Border","props","border","useColors","style","height","width","backgroundColor","marginTop","small","Spacing","tiny","marginBottom","Heading","accent","alignItems","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","totalSupplyOfSToken","totalSupply","getTotalRemainingSupplyLocked","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","console","log","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","fetchBtcMiningStat","fetch","response","json","code","msg","dayList","data","hourList","viewRoundSlot","timeKey","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","started","stakePeriod","desc","InfoBox","backgroundLight","borderDark","useStyles","Input","textDark","textMedium","onChangeText","onError","errors","forbidden","forEach","validation","match","regexp","error","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Button","maxButtonText","symbol","TokenInput","onAmountChanged","parseBalance","endsWith","indexOf","label","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","Meta","url","suffix","textDecorationLine","Expandable","t","useTranslation","useState","expanded","setExpanded","shouldExpand","onExpand","display","children","useHistoryState","EthersContext","address","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","totalStokenSupply","setTotalStokenSupply","loadingTotalStokenSupply","setLoadingTotalStokenSupply","totalStokenLocked","settotalStokenLocked","loadingTotalStokenLocked","setLoadingTotalStokenLocked","totalStakedBTCST","setTotalStakedBTCST","loadingTotalStaked","setLoadingTotalStaked","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","loadingMiningStatList","setLoadingMiningStatList","dayMiningList","setDayMiningList","setAmount","stoken","setSToken","records","setRecords","selectedRecord","setSelectedRecord","loadingDailyRecord","setLoadingDailyRecord","farmInfo","setFarmInfo","recordLastLoadTime","setRecordLastLoadTime","alreadyLoadedTime","setAlreadyLoadedTime","sToken","logoURI","BigNumber","from","getTimeKey","time","baseTime","Error","passed","Math","round","end","useEffect","useAsyncEffect","fetched","toNumber","Date","now","arr","index","go","k","rewardLastSubmiter","rewardAmount","rewardAccumulateAmount","totalStaked","stakedLowestWaterMark","totalStakedInSlot","stakedAddresses","concat","locked","rtokenContract","BBTC","StatInfo","dailyEstimatedUSD","dailyBTCNetreward","dailyBTCNetrewardPerStaked","dailyUSDRewardPerStaked","boostTimes","state","totalValue","loading","totalStoken","totalStokenRemainLocked","loadingDaily","FixedNumber","fromString","mulUnsafe","eachHaveCoin","preHash","hashrate","rate","divUnsafe","subUnsafe","toUnsafeFloat","dailyBtcPerHash","price","calculateDailyReward","btc","usd","Title","textAlign","EstimateAmountInput","isZero","aboveLine","compare","addUnsafe","RewardRecords","recordItem","RecordItem","RecordList","renderItem","item","key","record","useMemo","sort","t1","t2","Loading","paddingVertical","caption","numberOfLines","marginLeft","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","formatTimeKey2","SHTHistoryScreen","Screen","Container","BackgroundImage","Content"],"mappings":"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","file":"static/js/5.2fb28c9c.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\nexport const getTotalRemainingSupplyLocked = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getTotalRemainingSupplyLocked();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};\n\n\nexport const fetchBtcMiningStat = async ()=>{\n    // const response = await fetch(\"https://pool.binance.cc/mining-api/v1/public/pool/price/priceKline?algoId=1\");\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay\");\n    \n    const json = await response.json();\n    if (json.code != 0){\n        return {code:json.code,msg:json.msg};\n    }\n    const dayList = json.data.dayList;\n    const hourList = json.data.hourList;\n    return {code:0,dayList:dayList,hourList:hourList};\n}\n\nexport const viewRoundSlot = async(timeKey: number,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewRoundSlot(timeKey);\n    return value;\n};\n\nexport const viewFarmBasicInfo = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    console.log(contract);\n    const data = await Promise.all(\n        [\"_farmStartedTime\", \"_miniStakePeriodInSeconds\", \"_farmDescription\"].map(field => {\n            try {\n                return contract.callStatic[field]();\n            } catch (e) {\n                console.log(e);\n                return \"\";\n            }\n        })\n    );\n    return {\n        started: data[0],\n        stakePeriod: data[1],\n        desc: data[2]\n    };\n};","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"decimal-pad\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Heading from \"./Heading\";\n\nexport interface ExpandableProps {\n    title: string;\n    expanded: boolean;\n    onExpand?: () => void;\n    style?: ViewStyle;\n    children?: ReactNode;\n}\n\nconst Expandable: FC<ExpandableProps> = props => {\n    const t = useTranslation();\n    const [expanded, setExpanded] = useState(true);\n    const shouldExpand = props.expanded && expanded;\n    const buttonText = shouldExpand ? undefined : t(\"change\");\n    const onPress = () => {\n        setExpanded(true);\n        props.onExpand?.();\n    };\n\n    return (\n        <View style={props.style}>\n            <Heading text={props.title} buttonText={buttonText} onPressButton={onPress} />\n            <View style={{ display: shouldExpand ? \"flex\" : \"none\" }}>{props.children}</View>\n        </View>\n    );\n};\n\nexport default Expandable;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { BigNumber, ethers, FixedNumber } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewFarmBasicInfo,viewRoundSlot,fetchBtcMiningStat,getTotalRemainingSupplyLocked,viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport Token from \"../types/Token\";\nexport const BATCH_LOAD_RECORD_LIMIT = 5;\n\nexport interface MiningStat{\n    time:number,\n    price:FixedNumber,\n    eachHaveCoin:FixedNumber,\n    eachHaveUsdt:FixedNumber,\n    eachHaveCny:FixedNumber\n}\n\nexport interface FarmInfo{\n    started: number;\n    stakePeriod: number;\n    desc: string|undefined;\n}\n\nexport interface DailyRecord{\n    rewardLastSubmiter:string;\n    rewardAmount:BigNumber;\n    rewardAccumulateAmount:BigNumber;\n    totalStaked:BigNumber;\n    stakedLowestWaterMark:BigNumber;\n    totalStakedInSlot:BigNumber;\n    stakedAddresses:string[];\n    timeKey:number;\n}\n\nexport interface HistoryState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    \n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n\n    totalStokenSupply:ethers.BigNumber;\n    loadingTotalStokenSupply:boolean;\n\n    totalStokenLocked:ethers.BigNumber;\n    loadingTotalStokenLocked:boolean;\n\n    totalStakedBTCST:ethers.BigNumber;\n    loadingTotalStaked:boolean;\n\n    estimatedBTCPerToken:ethers.BigNumber;\n    loadingEstimatedBTC:boolean;\n\n\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean;\n\n    dayMiningList:MiningStat[];\n    hourMiningList:MiningStat[]\n    loadingMiningStatList:boolean;\n\n    amount: string;\n    setAmount: (amount: string) => void;\n\n    stoken?: Token;\n\n    loadingDailyRecord:boolean;\n    selectedRecord?:DailyRecord;\n    setSelectedRecord:(record?:DailyRecord)=>void;\n    records?:DailyRecord[];\n\n    farmInfo?:FarmInfo;\n    recordLastLoadTime:number|undefined;\n\n    alreadyLoadedTime:number|undefined;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHistoryState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n\n    const [totalStokenSupply,setTotalStokenSupply] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenSupply,setLoadingTotalStokenSupply] = useState(true);\n\n    const [totalStokenLocked,settotalStokenLocked] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenLocked,setLoadingTotalStokenLocked] = useState(true);\n\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    const [loadingMiningStatList,setLoadingMiningStatList] = useState(true);\n    \n    const [dayMiningList,setDayMiningList] = useState<MiningStat[]>();\n    const [amount, setAmount] = useState(\"\");\n    const [stoken,setSToken] = useState<Token>();\n    const [records,setRecords] = useState<DailyRecord[]>();\n    const [selectedRecord,setSelectedRecord] =useState<DailyRecord>();\n    const [loadingDailyRecord,setLoadingDailyRecord] = useState(true);\n    const [farmInfo,setFarmInfo] = useState<FarmInfo>();\n    const [recordLastLoadTime,setRecordLastLoadTime] = useState<number>();\n    const [alreadyLoadedTime,setAlreadyLoadedTime] = useState<number>();\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n    function getTimeKey(time,baseTime,stakePeriod){\n        if (time<baseTime){\n            throw new Error(\"time < farm started time\");\n        }\n        let passed = Math.round(time-baseTime);\n        let round = Math.round(passed/stakePeriod);\n        let end = baseTime+round*stakePeriod;\n        if (end<time){\n            return end+stakePeriod;\n        }\n        return end;\n    }\n    useEffect(() => {\n        setSToken(sToken);\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingTotalStokenSupply(true);\n        setLoadingTotalStokenLocked(true);\n        setLoadingTotalStaked(true);\n        setLoadingMiningStatList(true);\n        setAmount(\"\");\n        setLoadingDailyRecord(true);\n        setFarmInfo(undefined);\n        setRecordLastLoadTime(undefined);\n    }, [address]);\n\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            try{\n                const fetched = await viewFarmBasicInfo(provider);\n                setFarmInfo({started:fetched.started.toNumber(),stakePeriod:fetched.stakePeriod.toNumber(),desc:fetched.desc});\n                setRecordLastLoadTime(getTimeKey(Date.now()/1000,fetched.started,fetched.stakePeriod));\n            }finally{\n\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && farmInfo &&recordLastLoadTime) {\n            setLoadingDailyRecord(true);\n            console.log(\"farminfo\",farmInfo);\n            try{\n                let arr = [];\n                let now = Date.now()/1000;\n                if (alreadyLoadedTime && alreadyLoadedTime<now && alreadyLoadedTime>farmInfo.started){\n                    now = alreadyLoadedTime - farmInfo.stakePeriod;\n                }\n                for (let index = 0; index < BATCH_LOAD_RECORD_LIMIT; index++) {\n                    let go = now-index*farmInfo.stakePeriod;\n                    if (go<=farmInfo.started){\n                        break;;\n                    }\n                    let k = getTimeKey(go,farmInfo.started,farmInfo.stakePeriod);\n                    arr.push(k);\n                }\n                let data = await Promise.all(\n                    arr.map(field => {\n                        try {\n                            return viewRoundSlot(field,provider);\n                        } catch (e) {\n                            return \"\";\n                        }\n                    })\n                );\n                for (let index = 0; index < arr.length; index++) {\n                    data[index] = Object.assign({},data[index],{timeKey:arr[index]});\n                    data[index] = {\n                        rewardLastSubmiter:data[index]['rewardLastSubmiter'],\n                        rewardAmount:data[index]['rewardAmount'],\n                        rewardAccumulateAmount:data[index]['rewardAccumulateAmount'],\n                        totalStaked:data[index]['totalStaked'],\n                        stakedLowestWaterMark:data[index]['stakedLowestWaterMark'],\n                        totalStakedInSlot:data[index]['totalStakedInSlot'],\n                        stakedAddresses:data[index]['stakedAddresses'],\n                        timeKey:arr[index]\n                    } as DailyRecord;\n                }\n                if (records && records.length>0){\n                    data = records.concat(data);\n                }\n                if (arr.length>0){\n                    setAlreadyLoadedTime(arr[arr.length-1]);\n                }\n                setRecords(data);\n            }catch(e){\n                console.log(e);    \n            }finally{\n                setLoadingDailyRecord(false);\n            }\n        }\n\n    },[provider,signer,farmInfo,recordLastLoadTime]);\n\n    useAsyncEffect(async()=>{\n        setLoadingMiningStatList(true);\n        if (provider && signer) {\n            try{\n                // let tmp = JSON.parse('[{\"time\": 1609027200000,\"price\": \"26493.40\",\"eachHaveCoin\": \"0.00000740\",\"eachHaveUsdt\": \"0.19243450\",\"eachHaveCny\": \"1.25886801\"}]');\n                // setDayMiningList(tmp);\n                const fetched = await fetchBtcMiningStat();\n                if (fetched.code ==0 && fetched.dayList){\n                    setDayMiningList(fetched.dayList);\n                }\n            }finally{\n                setLoadingMiningStatList(false);\n            }\n        }\n    },[provider,signer]);\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load total supply of stoken\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n   //load daily records\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);    \n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        totalStokenSupply,\n        loadingTotalStokenSupply,\n        totalStokenLocked,\n        loadingTotalStokenLocked,\n        totalStakedBTCST,\n        loadingTotalStaked,\n        dayMiningList,\n        loadingMiningStatList,\n        yourMiningPower,\n        loadingYourMiningPower,\n        stoken,\n        amount,\n        setAmount,\n        loadingDailyRecord,\n        selectedRecord,\n        setSelectedRecord,\n        records\n    };\n};\n\nexport default useHistoryState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, View } from \"react-native\";\n\nimport moment from \"moment\";\nimport useAsyncEffect from \"use-async-effect\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport FlexView from \"../components/FlexView\";\nimport InfoBox from \"../components/InfoBox\";\nimport Heading from \"../components/Heading\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Loading from \"../components/Loading\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useMyLimitOrdersState, { MyLimitOrdersState } from \"../hooks/useMyLimitOrdersState\";\nimport { Order } from \"../hooks/useSettlement\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Screen from \"./Screen\";\nimport useHistoryState, { DailyRecord, HistoryState } from \"../hooks/useHistoryState\";\nimport { BigNumber, FixedNumber } from \"ethers\";\nimport TokenInput from \"../components/TokenInput\";\nimport Border from \"../components/Border\";\nimport {calculateDailyReward} from \"../utils\";\nimport { formatUSD,formatBalance, formatTimeKey2 } from \"../utils\";\ninterface DailyRecordProp{\n    record:DailyRecord;\n\n}\nconst DISTRIBUTE_LINE = \"0.6\";\n\nconst SHTHistoryScreen = () => {\n    const t = useTranslation();\n    const state = useHistoryState();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"farm-stats\")} />\n                    <Text light={true}>{t(\"pool-history-desc\")}</Text>\n                    <StatInfo state={state}/>                    \n                    <EstimateAmountInput state={state}/>\n                    {/* <Border style={{marginBottom:0}}/> */}\n                    <RewardRecords />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst StatInfo = ({state}:{state:HistoryState})=>{\n    const t = useTranslation();\n    const disabled = false;\n    const expiry = false;\n    \n    const totalValue = state.totalMinedBTC;\n    const loading = state.loadingTotalMined;\n    const totalStoken = state.totalStokenSupply;\n    const totalStokenRemainLocked = state.totalStokenLocked;\n    const totalStaked = state.totalStakedBTCST;\n    const btcInpool = state.btcInpool;\n    const loadingDaily = state.loadingMiningStatList ||state.loadingTotalStaked;\n\n    // console.log(\"setLoadingMiningStatList\"+loadingDaily);\n    // console.log(formatBalance(totalStaked.div(BigNumber.from(10)),18,8));\n\n    const dailyEstimated = loadingDaily||totalStaked==undefined?undefined:\n            FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\")\n                .mulUnsafe(FixedNumber.from(state.dayMiningList[0].eachHaveCoin));\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward;  \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (dailyEstimated!=undefined && totalStoken!=undefined && totalStaked!=undefined){\n        let aboveLine = true;\n        let preHash = FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\");\n        let hashrate = preHash;\n        let compare = FixedNumber.from(totalStaked);\n        let rate = compare.divUnsafe(FixedNumber.from(totalStoken))\n                .subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");        \n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            boostTimes = hashrate.divUnsafe(preHash);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        console.log(\"calculate netreward using pric:\"+price+\" daily btc per TH:\"+dailyBtcPerHash+\" hashrate:\"+hashrate);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        dailyBTCNetreward= btc;\n        dailyEstimatedUSD= usd;\n\n        dailyBTCNetrewardPerStaked = dailyBTCNetreward.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n        dailyUSDRewardPerStaked = dailyEstimatedUSD.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n    }\n    return(\n        <InfoBox>\n            <Title text={t(\"total-mined\")} style={{ flex: 1,fontSize:28 ,textAlign:\"center\"}} />\n            <Title\n                text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue,18,8)}\n                fontWeight={\"light\"}\n                disabled={loading}\n                style={{ fontSize: IS_DESKTOP ? 32 : 24,textAlign:\"center\"}}\n            />\n            <Meta \n                label={t(\"total-btc-still-in-pool\")} \n                text={state.loadingBTCInpool ||totalStoken==undefined ? t(\"fetching\") : formatBalance(btcInpool,18,8)}\n                suffix={\"\"}\n                disabled={state.loadingBTCInpool} />\n\n            <Meta \n                label={t(\"stoken-total-supply\")} \n                text={state.loadingTotalStokenSupply ||totalStoken==undefined ? t(\"fetching\") : formatBalance(totalStoken,18,8)}\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenSupply} />\n            <Meta \n                label={t(\"stoken-total-locked\")} \n                text={state.loadingTotalStokenLocked ||totalStoken==undefined ? t(\"fetching\") : formatBalance(totalStokenRemainLocked,18,8)}\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenLocked} />    \n            <Meta\n                label={t(\"total-staked-btcst\")}\n                text={state.loadingTotalStaked ||totalStaked==undefined ? t(\"fetching\") : formatBalance(totalStaked,18,2)}\n                suffix={state.loadingTotalStaked ||totalStaked==undefined ? \"\" : \"=\"+formatBalance(totalStaked.div(BigNumber.from(10)),18,2)+\" TH/s\"}\n                disabled={state.loadingTotalStaked}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward\")}\n                text={loadingDaily ||dailyBTCNetreward==undefined ? t(\"fetching\") : formatBalance(dailyBTCNetreward,18,8)+\" BTC\"}\n                suffix={loadingDaily ||dailyEstimatedUSD==undefined ? t(\"fetching\") : \" ≈ \"+\"$ \"+formatBalance(dailyEstimatedUSD,18,2)}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-boost\")}\n                text={loadingDaily ||boostTimes==undefined ? t(\"fetching\") : formatBalance(boostTimes,18,2)+\" X\"}\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-btc\")}\n                text={loadingDaily ||dailyBTCNetrewardPerStaked==undefined ? t(\"fetching\") : formatBalance(dailyBTCNetrewardPerStaked,18,8)+\" BTC\"}\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-usd\")}\n                text={loadingDaily ||dailyUSDRewardPerStaked==undefined ? t(\"fetching\") : \"$ \"+formatBalance(dailyUSDRewardPerStaked,18,4)}\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            \n        </InfoBox>\n    );\n};\n\nconst EstimateAmountInput = ({ state }: { state: HistoryState }) => {\n    const t = useTranslation();\n    const totalStoken = state.totalStokenSupply;\n    const totalStaked = state.totalStakedBTCST;\n    const disabled = (state.amount==undefined || state.amount==\"\" || FixedNumber.from(state.amount).isZero() \n    || state.loadingMiningStatList);\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward; \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (!disabled && totalStoken!=undefined && totalStaked!=undefined){\n        let hashrate = FixedNumber.fromString(state.amount).divUnsafe(FixedNumber.from(10));\n        let aboveLine = true;\n        let compare = FixedNumber.from(formatBalance(totalStaked,18,8)+\"\").addUnsafe(FixedNumber.from(state.amount));\n        let rate = compare.divUnsafe(FixedNumber.from( formatBalance(totalStoken,18,8)+\"\")\n                ).subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");\n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            console.log(\"compare:\"+compare+\" hashrate:\"+hashrate);\n            boostTimes = hashrate.mulUnsafe(FixedNumber.from(10)).divUnsafe(compare);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        \n        if (aboveLine){\n            dailyBTCNetreward= btc;\n            dailyEstimatedUSD= usd;\n        }else{\n            dailyBTCNetreward = btc.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n            dailyEstimatedUSD = usd.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n        }\n        \n    }\n    \n    return (\n        <View style={{marginTop:Spacing.large}}>\n            <Heading text={t(\"stake-amount-to-estimates\")} style={{marginBottom:0}} />\n            <Text light={true} style={{marginTop:0,marginBottom:Spacing.tiny}}>{t(\"estimate-desc\")}</Text>\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n            <InfoBox style={{marginTop:Spacing.tiny}}>\n                <Meta \n                    label={t(\"estimated-reward-in-btc\")} \n                    text={disabled?t(\"n/a\"):formatBalance(dailyBTCNetreward,18,8)}\n                    suffix={\"BTC\"}\n                    disabled={disabled} />\n                <Meta\n                    label={t(\"estimated-reward-in-usd\")}\n                    text={disabled?t(\"n/a\"):formatBalance(dailyEstimatedUSD,18,2)}\n                    suffix={\"USD\"}\n                    disabled={disabled}\n                />\n                <Meta\n                    label={t(\"estimated-boost-times\")}\n                    text={disabled?t(\"n/a\"):formatBalance(boostTimes,18,2)}\n                    suffix={\"X\"}\n                    disabled={disabled}\n                />\n            </InfoBox>\n        </View>\n    );\n};\n\nconst RewardRecords = () => {\n    const state = useHistoryState();\n    const t = useTranslation();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <Expandable\n                title={t(\"pool-daily-mined-history\")}\n                expanded={true}\n                onExpand={()=>{}}>\n                <RecordList loadingDailyRecord={state.loadingDailyRecord} \n                records={state.records}\n                recordItem={RecordItem}\n            />\n            </Expandable>\n            \n            {/* <OrderInfo state={state} /> */}\n        </View>\n    );\n};\n\nconst RecordList = (props: {\n    loadingDailyRecord: boolean;\n    records?: DailyRecord[];\n    recordItem: FC<DailyRecordProp>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>(props.records || [])\n                // @ts-ignore\n                .sort((t1, t2) => (t2.timeKey || 0) - (t1.timeKey || 0)),\n        [props.records]\n    );\n    return props.loadingDailyRecord || !props.records ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {t(\"deposited-rewards\")}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"staked-btcsts\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                {/* <ExternalIcon path={\"/all\"} /> */}\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"empty-staking-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: DailyRecordProp) => {\n    const record = props.record;\n    const rewardAmount = record.rewardAmount;\n    const stakedLowestWaterMark = record.stakedLowestWaterMark;\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={false}>\n                    {rewardAmount.gt(BigNumber.from(0)) ? formatBalance(rewardAmount || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={false}>\n                    {stakedLowestWaterMark.gt(BigNumber.from(0)) ? formatBalance(stakedLowestWaterMark || 0,18,2): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={false}>\n                    {formatTimeKey2(record.timeKey)}\n                </Text>\n            </View>\n            {/* <ExternalIcon path={\"/slot/\" + record.timeKey} /> */}\n        </FlexView>\n    );\n};\nexport default SHTHistoryScreen;\n"],"sourceRoot":""}