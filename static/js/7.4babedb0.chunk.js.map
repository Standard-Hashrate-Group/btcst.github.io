{"version":3,"sources":["src/components/Border.tsx","src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/utils/api-utils.ts","node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","src/hooks/useMiningState.tsx","src/screens/SHTMiningScreen.tsx"],"names":["Border","props","border","useColors","style","height","width","backgroundColor","marginTop","small","Spacing","tiny","marginBottom","Heading","accent","alignItems","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","totalSupplyOfSToken","totalSupply","getTotalRemainingSupplyLocked","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","console","log","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","fetchBtcMiningStat","fetch","response","json","code","msg","dayList","data","hourList","getBTCSTPrice","market_pairs","find","pair","market_pair","exchange","quote","USD","price","viewRoundSlot","timeKey","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","started","stakePeriod","desc","module","exports","obj","TypeError","useMiningState","EthersContext","address","useState","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","userInfo","setUserInfo","loadingUserInfo","setLoadingUserInfo","useEffect","useAsyncEffect","fetched","rtokenContract","BBTC","getAddress","userInfoInFarm","Mining","state","BtcStillInPool","t","useTranslation","loading","Title","formatBalance","YourMiningPower","goToFarming","number","ethers","BigNumber","from","suffix","YourStakingRecord","records","stakeInfo","recordItem","RecordItem","LoadingNumber","Loading","RecordList","renderItem","item","key","record","useMemo","filter","sub","withdrawed","gt","lockedAmount","lockedWithdrawed","sort","t1","t2","toNumber","length","paddingVertical","caption","numberOfLines","marginLeft","path","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","freeRemain","lockedRemain","formatTimeKey","ExternalIcon","textDark","isETH","endsWith","constants","AddressZero","window","open","toLowerCase","SHTMiningScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/7.4babedb0.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\nexport const getTotalRemainingSupplyLocked = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getTotalRemainingSupplyLocked();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(105).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};\n\n\nexport const fetchBtcMiningStat = async ()=>{\n    // const response = await fetch(\"https://pool.binance.cc/mining-api/v1/public/pool/price/priceKline?algoId=1\");\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay\");\n    \n    const json = await response.json();\n    if (json.code != 0){\n        return {code:json.code,msg:json.msg};\n    }\n    const dayList = json.data.dayList;\n    const hourList = json.data.hourList;\n    return {code:0,dayList:dayList,hourList:hourList};\n}\n\nexport async function getBTCSTPrice() {\n    const response = await fetch(\"https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/gp-replay\");\n\n    const data = await response.json();\n\n    const source = (data?.data?.market_pairs || []).find(pair => {\n        return pair && pair.market_pair === \"BTCST/USDT\" && pair.exchange?.name === \"Binance\";\n    });\n\n    return source?.quote?.USD?.price || 0;\n}\n\nexport const viewRoundSlot = async(timeKey: number,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewRoundSlot(timeKey);\n    return value;\n};\n\nexport const viewFarmBasicInfo = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    console.log(contract);\n    const data = await Promise.all(\n        [\"_farmStartedTime\", \"_miniStakePeriodInSeconds\", \"_farmDescription\"].map(field => {\n            try {\n                return contract.callStatic[field]();\n            } catch (e) {\n                console.log(e);\n                return \"\";\n            }\n        })\n    );\n    return {\n        started: data[0],\n        stakePeriod: data[1],\n        desc: data[2]\n    };\n};\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\n\nexport interface MiningState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean; \n    userInfo:MiningUserInfo;\n    loadingUserInfo:boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMiningState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    \n    const [userInfo,setUserInfo] = useState<MiningUserInfo>();\n    const [loadingUserInfo,setLoadingUserInfo] = useState(true);\n\n    useEffect(() => {\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingUserInfo(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingYourMiningPower(true);\n            setLoadingUserInfo(true);\n            const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n            try{\n                setYourMiningPower((await userInfoInFarm).amount);\n                setUserInfo(await userInfoInFarm);\n            }finally{\n                setLoadingYourMiningPower(false);\n                setLoadingUserInfo(false);\n            }\n        }\n    },[provider,signer]);\n    \n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        yourMiningPower,\n        loadingYourMiningPower,\n        userInfo,\n        loadingUserInfo\n    };\n};\n\nexport default useMiningState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\n\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nimport useMiningState, { MiningState } from \"../hooks/useMiningState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance, formatTimeKey } from \"../utils\";\nimport Screen from \"./Screen\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport { MiningSubMenu } from \"../components/web/WebSubMenu\";\n\ninterface StakeRecordItemProps {\n    record: MiningStakeRecord;\n    disabled?: boolean;\n}\nconst SHTMiningScreen = () => {\n    const t = useTranslation();\n    const state = useMiningState();\n    const { } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1,fontSize:28 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Mining state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <MiningSubMenu />\n        </Screen>\n    );\n};\n\nconst Mining = ({ state }: { state: MiningState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <BtcStillInPool state={state} />\n            <Border/>\n            <View style={{ height: Spacing.large }} />\n            <YourMiningPower state={state} />\n            <View style={{ height: Spacing.large }} />\n            <YourStakingRecord state={state} />\n        </View>\n    );\n};\n\nconst BtcStillInPool = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const {} = useContext(EthersContext);\n    const amount = state.btcInpool;\n    const loading = state.loadingBTCInpool;\n    return (\n        <View>\n            <Heading text={t(\"total-btc-still-in-pool\")}/>\n            <Title\n                        text={loading || amount==undefined ? t(\"fetching\") : formatBalance(amount,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\nconst YourMiningPower = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/staking\", \"Stake\");\n    return (\n        <View>\n            <Heading text={t(\"your-mining-power\")} buttonText={t(\"stake\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingYourMiningPower}\n                 number={state.yourMiningPower?.div(ethers.BigNumber.from(10))} suffix={\"TH/s\"} />\n        </View>\n    );\n};\n\nconst YourStakingRecord = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    \n    return (\n        <View>\n            <Heading text={t(\"your-staking-records\")} />\n            {/* @ts-ignore */}\n            <RecordList loading={state.loadingUserInfo} records={state.userInfo?.stakeInfo} recordItem={RecordItem}/>\n        </View>\n    );\n};\n\n\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\nconst RecordList = (props: {\n    loading: boolean;\n    records?: MiningStakeRecord[];\n    recordItem: FC<StakeRecordItemProps>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            (props.records || [])\n                // @ts-ignore\n                .filter(record => ( record.amount.sub(record.withdrawed).gt(ethers.BigNumber.from(0)) ||\n                        record.lockedAmount.sub(record.lockedWithdrawed).gt(ethers.BigNumber.from(0)) ) )\n                .sort((t1, t2) => (t2.timeKey.toNumber() || 0) - (t1.timeKey.toNumber() || 0)),\n        [props.records]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {\"BTCST\"}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"locked\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                <ExternalIcon path={\"/all\"} />\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"empty-staking-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: StakeRecordItemProps) => {\n    const record = props.record;\n    const freeRemain = record.amount.sub(record.withdrawed);\n    const lockedRemain = record.lockedAmount.sub(record.lockedWithdrawed);\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={props.disabled}>\n                    {freeRemain.gt(BigNumber.from(0)) ? formatBalance(freeRemain || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={props.disabled}>\n                    {lockedRemain.gt(BigNumber.from(0)) ? formatBalance(lockedRemain || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={props.disabled}>\n                    {formatTimeKey(record.timeKey)}\n                </Text>\n            </View>\n            <ExternalIcon path={\"/slot/\" + record.timeKey} />\n        </FlexView>\n    );\n};\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://get.1-b.tc/#/history\" + path.toLowerCase());\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\nexport default SHTMiningScreen;\n"],"sourceRoot":""}